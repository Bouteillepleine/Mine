name: Oplus Android 15 Universal

env:
  TZ: Asia/Shanghai
  CPU: 'sm8650'
  FEIL: 'oppo+oplus+realme'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  KERNEL_NAME: 'android14-11-o-g239209decfd3'
  KERNELSU_VARIANT: 'SukiSU-Ultra'
  KERNELSU_BRANCH: 'susfs-dev'

on:
  workflow_dispatch:
    inputs:
      lz4k_enable:
        description: 'Whether to install LZ4K patch'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      scx_enable:
        description: 'Whether to install Fengchi kernel driver'
        required: true
        type: choice
        default: 'false'
        options:
          - 'true'
          - 'false'
      kernel_suffix:
        description: 'Kernel suffix (leave empty for default, do not add hyphen at the start)'
        required: false
        type: string
        default: ''
      basebranch:
        required: true
        type: choice
        options:
          - sm8650_v_15.0.0_oneplus12
          - sm8650_v_15.0.0_oneplus_ace5
          - sm8650_v_15.0.0_ace_3_pro
          - realme_GT5pro-AndroidV-common-source
        default: 'sm8650_v_15.0.0_oneplus_ace5'
      KPM:
        type: boolean
        description: "Whether to enable KPM?"
        required: true
        default: true
      ksu_type:
        description: 'Which KSU to use'
        required: true
        type: choice
        options:
          - SukiUltra
          - ksun
      ksun_branch:
        description: 'ksun_branch'
        required: true
        type: choice
        options:
          - "next-susfs"
          - "next"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ env.KSUVER }}
    steps:
      - name: Maximize build space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Show selected inputs debug
        run: |
          echo "Selected lz4k_enable: ${{ github.event.inputs.lz4k_enable }}"
          echo "Selected scx_enable: ${{ github.event.inputs.scx_enable }}"
          echo "Selected kernel_suffix: ${{ github.event.inputs.kernel_suffix }}"
          echo "Selected basebranch: ${{ github.event.inputs.basebranch }}"
          echo "Selected KPM: ${{ github.event.inputs.KPM }}"
          echo "Selected ksu_type: ${{ github.event.inputs.ksu_type }}"
          echo "Selected ksun_branch: ${{ github.event.inputs.ksun_branch }}"
          
      - name: Install and configure environment dependencies
        run: |
          sudo apt-mark hold firefox
          sudo apt update && sudo apt upgrade -y
          sudo apt-get install curl bison flex make binutils dwarves git lld pahole zip perl make gcc python3 python-is-python3 bc libssl-dev libelf-dev -y
          sudo rm -rf ./llvm.sh
          sudo wget https://apt.llvm.org/llvm.sh
          sudo chmod +x llvm.sh
          sudo ./llvm.sh 20 all

      - name: Initialize source repository
        run: |
          echo ">>> Initializing repository..."
          rm -rf kernel_workspace
          mkdir kernel_workspace
          cd kernel_workspace
          git clone --depth 1 https://github.com/OnePlusOSS/android_kernel_modules_and_devicetree_oneplus_sm8650/ -b oneplus/"${{ github.event.inputs.basebranch }}"  vendor
          mv vendor/* ..
          git clone --depth=1 https://github.com/OnePlusOSS/android_kernel_common_oneplus_sm8650 -b oneplus/"${{ github.event.inputs.basebranch }}" common
          echo ">>> Repository initialization complete"
          
          git clone https://github.com/Carl1984/oppo_oplus_realme_sm8650.git
          cp ./oppo_oplus_realme_sm8650/patches/001-lz4.patch ./common/
          cp ./oppo_oplus_realme_sm8650/patches/002-zstd.patch ./common/
          
          echo "Removing ABI protection & dirty suffix..."
          rm common/android/abi_gki_protected_exports_* || true
          for f in common/scripts/setlocalversion; do
            sed -i 's/ -dirty//g' "$f"
            sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' "$f"
          done

      - name: Add SukiSU-Ultra
        if: ${{ github.event.inputs.ksu_type == 'SukiUltra' }}
        id: ksu_version
        run: |
          cd kernel_workspace
          curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/refs/heads/main/kernel/setup.sh" | bash -s susfs-dev
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=$KSU_VERSION/" kernel/Makefile

      - name: Apply SUSFS patches for SukiSU-Ultra
        if: ${{ github.event.inputs.ksu_type == 'SukiUltra' }}
        run: |
          cd kernel_workspace
          git clone https://github.com/ShirkNeko/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cp ./SukiSU_patch/hooks/new_hooks.patch ./common/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          patch -p1 < new_hooks.patch

      - name: Apply Hide Stuff patches
        if: ${{ github.event.inputs.ksu_type == 'SukiUltra' }}
        run: |
          cd kernel_workspace/common
          cp ../SukiSU_patch/69_hide_stuff.patch ./
          patch -p1 < 69_hide_stuff.patch

      - name: Set up KernelSU Next
        if: ${{ github.event.inputs.ksu_type == 'ksun' }}
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.ksun_branch }}" == "next" ]]; then
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next
              BASE_VERSION=10200
          else
              curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s next-susfs
              BASE_VERSION=10198
          fi
          cd ./KernelSU-Next
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+"  $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "ksuver=$KSU_VERSION" >> $GITHUB_OUTPUT
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply SUSFS patches for ksun
        if: ${{ github.event.inputs.ksu_type == 'ksun' }}
        run: |
          cd kernel_workspace
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            git clone https://github.com/ShirkNeko/SukiSU_patch.git
          fi        
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/WildKernels/kernel_patches.git
          cp ./susfs4ksu/kernel_patches/KernelSU/10_enable_susfs_for_ksu.patch ./KernelSU-Next/
          cp ./susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ./susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ./susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cd ./KernelSU-Next
          if [[ "${{ github.event.inputs.ksun_branch }}" == "next" ]]; then
            cp ../oppo_oplus_realme_sm8650/patches/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch ./
            patch -p1 --forward --fuzz=3 < 0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch || true
          fi
          cd ../common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          cp ../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 -F 3 < syscall_hooks.patch
          cp ../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch
          
      - name: Apply lz4 patch  
        run: |
          cd kernel_workspace/common
          patch -p1 < 001-lz4.patch
          patch -p1 < 002-zstd.patch

      - name: Apply lz4k patch
        if: ${{ github.event.inputs.lz4k_enable == 'true' }}
        run: |
          cd kernel_workspace/common
          cp -r ../SukiSU_patch/other/zram/lz4k/include/linux/* ./include/linux/
          cp -r ../SukiSU_patch/other/zram/lz4k/lib/* ./lib
          cp -r ../SukiSU_patch/other/zram/lz4k/crypto/* ./crypto
          cp ../SukiSU_patch/other/zram/zram_patch/${{ env.KERNEL_VERSION }}/lz4kd.patch ./
          patch -p1 -F 3 < lz4kd.patch || true

      - name: Configure Git identity
        run: |
          git config --local user.name "GitHub Action"
          git config --local user.email "action@github.com"

      - name: Add SUSFS configuration settings
        run: |
          cd kernel_workspace
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          DEFCONFIG=./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          if [[ "${{ github.event.inputs.ksu_type }}" == "SukiUltra" ]]; then
            if [[ "${{ github.event.inputs.KPM }}" == "true" ]]; then
              echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
            fi
            echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          fi
          if [[ "${{ github.event.inputs.ksu_type }}" == "ksun" ]]; then
            echo "CONFIG_KSU_WITH_KPROBES=n" >> "$CONFIG_FILE"
            echo "CONFIG_KSU_KPROBES_HOOK=n" >> "$CONFIG_FILE"
          fi
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          if [[ "${{ github.event.inputs.lz4k_enable }}" == "true" ]]; then
            echo "CONFIG_ZSMALLOC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4HC=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4K=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_LZ4KD=y" >> "$CONFIG_FILE"
            echo "CONFIG_CRYPTO_842=y" >> "$CONFIG_FILE"
          fi
          echo "CONFIG_THINLTO=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_DEFAULT_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_CDG=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_DCTCP=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_SFQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_TBF=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_FASTOPEN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> "$CONFIG_FILE"
          echo "CONFIG_EXT4_INODE_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_F_FS_IPC_LOG=n" >> "$CONFIG_FILE"
          echo "CONFIG_HUNG_TASK_ENH=n" >> "$CONFIG_FILE"
          echo "CONFIG_IIO_TEST_FORMAT=n" >> "$CONFIG_FILE"
          echo "CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=n" >> "$CONFIG_FILE"
          echo "CONFIG_OPLUS_LOCK_TORTURE=n" >> "$CONFIG_FILE"
          echo "CONFIG_SOC_TOPOLOGY_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_SOC_UTILS_TEST=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_KERNEL=n" >> "$CONFIG_FILE"
          echo "CONFIG_DYNAMIC_DEBUG=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_INFO=n" >> "$CONFIG_FILE"
          echo "CONFIG_BOEFFLA_WL_BLOCKER=y" >> "$DEFCONFIG"
          echo "CONFIG_WQ_POWER_EFFICIENT_DEFAULT=y" >> "$DEFCONFIG"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$DEFCONFIG"
          sed -i "s/CONFIG_PRINTK_TIME=y/CONFIG_PRINTK_TIME=n/" "$DEFCONFIG"
          sed -i "s/CONFIG_PRINTK_CALLER=y/CONFIG_PRINTK_CALLER=n/" "$DEFCONFIG"
          sed -i 's/check_defconfig//' ./common/build.config.gki
          cd common
          git add -A && git commit -a -m "Add SUSFS, wakelock blocker, optimization configuration, and ThinLTO" || echo "No changes to commit"

      - name: Update Kconfig for Blacklisted Modules
        run: |
          if [ -d "kernel_workspace/common" ]; then
            find kernel_workspace/common -name Kconfig -exec sed -i \
              -e 's/CONFIG_EXT4_INODE_TEST=[ym]/CONFIG_EXT4_INODE_TEST=n/' \
              -e 's/CONFIG_F_FS_IPC_LOG=[ym]/CONFIG_F_FS_IPC_LOG=n/' \
              -e 's/CONFIG_HUNG_TASK_ENH=[ym]/CONFIG_HUNG_TASK_ENH=n/' \
              -e 's/CONFIG_IIO_TEST_FORMAT=[ym]/CONFIG_IIO_TEST_FORMAT=n/' \
              -e 's/CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=[ym]/CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=n/' \
              -e 's/CONFIG_OPLUS_LOCK_TORTURE=[ym]/CONFIG_OPLUS_LOCK_TORTURE=n/' \
              -e 's/CONFIG_SOC_TOPOLOGY_TEST=[ym]/CONFIG_SOC_TOPOLOGY_TEST=n/' \
              -e 's/CONFIG_SOC_UTILS_TEST=[ym]/CONFIG_SOC_UTILS_TEST=n/' {} \;
          else
            echo "Directory kernel_workspace/common not found, skipping Kconfig updates"
          fi

      - name: Add build name
        run: |
          cd kernel_workspace
          echo "Replacing kernel version suffix..."
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            echo "Current kernel version suffix: ${{ github.event.inputs.kernel_suffix }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ github.event.inputs.kernel_suffix }}\"|" "$f"
            done
          else
            echo "Current kernel version suffix: ${{ env.KERNEL_NAME }}"
            for f in ./common/scripts/setlocalversion; do
              sed -i "\$s|echo \"\\\$res\"|echo \"-${{ env.KERNEL_NAME }}\"|" "$f"
            done
          fi

      - name: Build kernel with ThinLTO
        run: |
          cd kernel_workspace
          if [[ ${{ github.event.inputs.scx_enable }} == "true" ]]; then
            git clone https://github.com/cctv18/sched_ext.git
            rm -rf ./sched_ext/.git
            rm -rf ./sched_ext/README.md
            cp -r ./sched_ext/* ./common/kernel/sched
          fi
          cd common
          make -j$(nproc --all) LLVM=-20 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- CROSS_COMPILE_ARM32=arm-linux-gnuabeihf- CC=clang LD=ld.lld HOSTCC=clang HOSTLD=ld.lld O=out KCFLAGS+=-Wno-error LTO=thin gki_defconfig all
          echo "Kernel compilation with ThinLTO complete!"

      - name: Apply KPM patch and patch kernel
        if: ${{ github.event.inputs.ksu_type == 'SukiUltra' && github.event.inputs.KPM == 'true' }}
        run: |
          cd kernel_workspace/common/out/arch/arm64/boot
          curl -LO https://github.com/SukiSU-Ultra/SukiSU_KernelPatch_patch/releases/download/0.11-beta/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image

      - name: Set suffix
        id: suffix
        run: |
          echo "value=${{ github.event.inputs.KPM == 'true' && '_KPM' || '' }}${{ github.event.inputs.scx_enable == 'true' && '_SCX' || '' }}${{ github.event.inputs.lz4k_enable == 'true' && '_LZ4KD' || '' }}_ThinLTO" >> $GITHUB_OUTPUT

      - name: Clone AnyKernel3 and package
        run: |
          cd kernel_workspace
          git clone https://github.com/cctv18/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git
          cd AnyKernel3
          cp ../common/out/arch/arm64/boot/Image ./Image
          if [ ! -f ./Image ]; then
            echo "Kernel image file not found, build may have failed"
            exit 1
          fi
          if [[ ${{ github.event.inputs.lz4k_enable }} == "true" ]]; then
            wget https://raw.githubusercontent.com/Suxiaoqinx/kernel_manifest_OnePlus_Sukisu_Ultra/main/zram.zip
          fi
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ github.event.inputs.kernel_suffix }}.zip ./*
          else
            zip -r ../AnyKernel3_${{ github.event.inputs.ksu_type }}_${{ env.KSUVER }}${{ steps.suffix.outputs.value }}_${{ env.KERNEL_NAME }}.zip ./*
          fi

      - name: Upload ZIP artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ${{ github.workspace }}/kernel_workspace/*.zip

  release:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      actions: read
    steps:
      - name: Download ZIP artifact
        uses: actions/download-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: ./release_zips

      - name: Set environment variables
        run: |
          if [[ -n "${{ github.event.inputs.kernel_suffix }}" ]]; then
            FULL_VERSION=${{ format('{0}.75-{1}', env.KERNEL_VERSION, github.event.inputs.kernel_suffix) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          else
            FULL_VERSION=${{ format('{0}.75-{1}', env.KERNEL_VERSION, env.KERNEL_NAME) }}
            echo "FULL_VERSION=$FULL_VERSION" >> $GITHUB_ENV
            export FULL_VERSION=$FULL_VERSION
          fi
          TIME="$(TZ='Asia/Shanghai' date +'%y%m%d%H%M%S')"
          TIME_FORM="$(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M:%S')"
          echo "TIME=$TIME" >> $GITHUB_ENV
          echo "TIME_FORM=$TIME_FORM" >> $GITHUB_ENV
          TAG_HEAD="OPPO+OPlus+Realme-A15-build"
          echo "TAG_HEAD=$TAG_HEAD" >> $GITHUB_ENV

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "${{ env.TAG_HEAD }}-${{ env.TIME }}"
          name: "${{ env.TAG_HEAD }}-${{ env.FULL_VERSION }}-ThinLTO"
          body: |
            ### 📱 Oplus Android 15 KSU SM8650 Universal Kernel with ThinLTO | Build Information
            - Kernel version: ${{ env.FULL_VERSION }}
            - Build time: ${{ env.TIME_FORM }}
            - Device: Oplus Snapdragon 8Gen3 6.1 Android 15 kernel universal (based on ${{ github.event.inputs.basebranch }} Android 15 official OKI source)
            - Features: SUSFS + VFS, ThinLTO enabled
            - KSU Type: ${{ github.event.inputs.ksu_type }}
            - KPM: ${{ github.event.inputs.KPM }} (when KSU is SukiSU)
            - KPM: ${{ github.event.inputs.ksun_branch }} (when KSU is KSU Next)
            - LZ4K support: ${{ github.event.inputs.lz4k_enable }}
            - Fengchi kernel support: ${{ github.event.inputs.scx_enable }}
            - Recommended system: ColorOS 15 / RealmeUI 6.0
            - SukiSU manager download: [SukiSU-Ultra](https://github.com/ShirkNeko/SukiSU-Ultra/releases)
            - KSU Next manager: [KernelSU-Next](https://github.com/KernelSU-Next/KernelSU-Next/releases)
            ### ⏫️ Update content:
            - Updated KSU to the latest version (${{ needs.build.outputs.ksuver }})
            - Enabled ThinLTO for improved performance and binary size
            ### 📋 Installation method | Installation Guide
            1. If your phone has a third-party recovery (e.g., TWRP), download the AnyKernel flash package for your device, enter Recovery mode, flash the package via Recovery, and reboot.
            2. If your phone already has root access, install [HorizonKernelFlasher](https://github.com/libxzr/HorizonKernelFlasher/releases), flash the AnyKernel package in HorizonKernelFlasher, and reboot.
            3. If you have previously flashed the SukiSU Ultra kernel and the SukiSU Ultra manager is updated to the latest version, you can flash the AnyKernel package directly in the SukiSU Ultra manager and reboot.
            ※※※Flashing kernels carries risks. To prevent unexpected issues that could brick your phone, please back up critical boot partitions like boot using [KernelFlasher](https://github.com/capntrips/KernelFlasher) before flashing the kernel!※※※
          draft: false
          prerelease: false
          files: |
            release_zips/AnyKernel3_*.zip
