name: OnePlus 13R
on:
  workflow_dispatch:
  schedule:
    - cron: '0 16 * * *' 
env:
  CPU: 'sm8650'
  FEIL: 'oneplus_13r'
  CPUD: 'pineapple'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  BUILD_METHOD: 'gki'
  RETENTION_COUNT: 3
  WORKSPACE_DIR: 'kernel_workspace'
  KERNEL_NAME: ''

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksuver.outputs.value }}
    steps:
      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 2048
          swap-size-mb: 8192
          remove-dotnet: 'true'
          remove-android: 'true'
          remove-haskell: 'true'
          remove-codeql: 'true'

      - name: Configure Git Information
        run: |
          git config --global user.name "0+builder"
          git config --global user.email "0+builder@yahoo.com"

      - name: Install Dependencies
        run: |
          sudo apt update && sudo apt upgrade -y
          sudo apt install -y python3 git curl

      - name: Display Selected Input Parameters (Debug)
        run: |
          echo "CPU: ${{ env.CPU }}"
          echo "Configuration File: ${{ env.FEIL }}"
          echo "Processor Codename: ${{ env.CPUD }}"
          echo "Android Version: ${{ env.ANDROID_VERSION }}"
          echo "Kernel Version: ${{ env.KERNEL_VERSION }}"
          echo "Build Method: ${{ env.BUILD_METHOD }}"

      - name: Install Repo Tool
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Initialize Repo and Sync Source Code
        run: |
          mkdir kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ env.CPU }} -m ${{ env.FEIL }}.xml --depth=1
          repo sync
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force Remove -dirty Suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-main
          cd ./KernelSU
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count main) "+" 10606)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          export KSU_VERSION=$KSU_VERSION
          sed -i "s/DKSU_VERSION=12800/DKSU_VERSION=${KSU_VERSION}/" kernel/Makefile

      - name: Apply SukiSU Ultra Patch
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "Applying susfs patch to kernel"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/

          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          echo "Completed"

      - name: Apply Hide Patch
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Applying hide application patch"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS Patch
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Applying VFS patch"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "VFS patch completed"

      - name: Add Configuration Information
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"

          # SukiSU Ultra config
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"

          # SUSFS configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"

          # TMPFS configurations
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"

          # BBR configurations
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"

          # ECN configurations
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$CONFIG_FILE"
          sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' ./common/arch/arm64/configs/gki_defconfig          

      - name: Additional Configurations
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_DEBUG_KERNEL=n" >> "$CONFIG_FILE"
          echo "CONFIG_DYNAMIC_DEBUG=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_INFO=n" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG=y" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_NONE/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG_FULL/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG_THIN/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG/d' "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$CONFIG_FILE"

      - name: Disable OnePlus Kernel Module
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_INPUT_KUNIT_TEST=m/CONFIG_INPUT_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/CONFIG_SND_SOC_UTILS_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_HID_KUNIT_TEST=m/CONFIG_HID_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_RTC_LIB_KUNIT_TEST=m/CONFIG_RTC_LIB_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_CLK_KUNIT_TEST=m/CONFIG_CLK_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_CLK_GATE_KUNIT_TEST=m/CONFIG_CLK_GATE_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_IIO_FORMAT_KUNIT_TEST=m/CONFIG_IIO_FORMAT_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_EXT4_KUNIT_TESTS=m/CONFIG_EXT4_KUNIT_TESTS=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_FAT_KUNIT_TEST=m/CONFIG_FAT_KUNIT_TEST=n/g' "$CONFIG_FILE"
         
          # Remove check_defconfig
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add Build Name
        working-directory: ${{ env.WORKSPACE_DIR }}/kernel_platform
        run: |
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          sed -i 's|echo "\$res"|echo "'"$(echo "${{ env.KERNEL_NAME }}" | sed 's/[\&/]/\\&/g')"'"|g' ./common/scripts/setlocalversion

      - name: Configure Bazel for ThinLTO
        run: |
          cd kernel_workspace/kernel_platform
          BUILD_CONFIG="./common/build.config.gki"
          echo "BAZEL_LTO=--lto=thin" >> "$BUILD_CONFIG"
          echo "KBUILD_EXTRA_CFLAGS=-flto=thin" >> "$BUILD_CONFIG"

      - name: Build Kernel
        run: |
          cd kernel_workspace
          export LTO=thin
          export KCFLAGS="-O2 -flto=thin -fno-merge-all-constants"
          export KBUILD_CFLAGS="-flto=thin"
          export BAZEL_LTO=--lto=thin
          ./kernel_platform/build_with_bazel.py -t ${{ env.CPUD }} ${{ env.BUILD_METHOD }} --lto=thin

      - name: Create AnyKernel3
        run: |
          git clone https://github.com/Numbersf/AnyKernel3 --depth=1
          rm -rf ./AnyKernel3/.git

          dir1="kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/dist/"
          dir2="kernel_workspace/kernel_platform/bazel-out/k8-fastbuild/bin/msm-kernel/${{ env.CPUD }}_gki_kbuild_mixed_tree/"
          dir3="kernel_workspace/kernel_platform/out/msm-${{ env.CPUD }}-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/dist/"
          dir4="kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          dir5="kernel_workspace/kernel_platform/out/msm-${{ env.CPUD }}-${{ env.CPUD }}-${{ env.BUILD_METHOD }}/gki_kernel/common/arch/arm64/boot/"
          target1="./AnyKernel3/"
          target2="./kernel_workspace/kernel"

          # Find Image file
          if find "$dir1" -name "Image" | grep -q "Image"; then
            image_path="$dir1"Image
          elif find "$dir2" -name "Image" | grep -q "Image"; then
            image_path="$dir2"Image
          elif find "$dir3" -name "Image" | grep -q "Image"; then
            image_path="$dir3"Image
          elif find "$dir4" -name "Image" | grep -q "Image"; then
            image_path="$dir4"Image
          elif find "$dir5" -name "Image" | grep -q "Image"; then
            image_path="$dir5"Image
          else
            image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          fi

          # Copy Image
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            mkdir -p "$dir1"
            if [ "$(realpath "$image_path")" != "$(realpath "$dir1"Image)" ]; then
              cp "$image_path" "$dir1"
            else
              echo "Source and destination are the same, skipping copy"
            fi
            cp "$dir1"Image ./AnyKernel3/Image
          else
            echo "Image file not found, build may have failed"
            exit 1
          fi

      - name: Apply patch_linux and Replace Kernel
        run: |
          cd kernel_workspace/kernel_platform/out/msm-kernel-${{ env.CPUD }}-gki/dist
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image
          cp Image $GITHUB_WORKSPACE/kernel_workspace/init_boot_Image.img
          
      - name: Package AnyKernel3 (ZIP)
        run: |
          cd $GITHUB_WORKSPACE/AnyKernel3
          zip -r ../AnyKernel3_KernelSU_${{ env.KSUVER }}_${{ env.FEIL }}.zip ./*
          cd ..

      - name: Package Original Image (ZIP)
        run: |
          cd $GITHUB_WORKSPACE/kernel_workspace
          zip -r ../Image_KernelSU_${{ env.KSUVER }}_${{ env.FEIL }}.zip ./init_boot_Image.img      

      - name: Set Suffix
        id: suffix
        run: |
          echo "value=_KPM_VFS" >> $GITHUB_OUTPUT

      - name: Remove _uv Suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ env.FEIL }}"
          clean_feil="${clean_feil%_v}"
          clean_feil="${clean_feil%_u}"
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: |
            *.zip
          retention-days: 3

      - name: Record KSU Version
        id: ksuver
        run: |
          echo "value=${KSUVER}" >> $GITHUB_OUTPUT
  
