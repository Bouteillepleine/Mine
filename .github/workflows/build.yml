name: Build
permissions:
  contents: write
  actions: write

on:
  workflow_call:
    inputs:
      model:
        required: true
        type: string
      soc:
        required: true
        type: string
      branch:
        required: true
        type: string
      manifest:
        required: true
        type: string
      android_version:
        required: true
        type: string
      kernel_version:
        required: true
        type: string
      ksun_branch:
        required: true
        type: string
        default: stable

jobs:
  build-kernel-oneplus-kernelsu-susfs:
    runs-on: ubuntu-latest

    steps:
      - name: "üêÇSetup System"
        run: |
          export DEBIAN_FRONTEND=noninteractive
          echo "DEBIAN_FRONTEND=noninteractive" >> $GITHUB_ENV
          
          df -h
          
          sudo rm -rf /usr/share/dotnet /usr/local/lib/android /opt/ghc /usr/local/.ghcup /opt/hostedtoolcache/CodeQL /usr/local/share/powershell /usr/share/swift || true
          sudo docker image prune --all --force
          echo "some directories deleted"
          
          sudo apt-get purge -y \
            aria2 ansible azure-cli shellcheck rpm xorriso zsync \
            esl-erlang firefox gfortran-8 gfortran-9 google-chrome-stable \
            google-cloud-sdk imagemagick \
            libmagickcore-dev libmagickwand-dev libmagic-dev ant ant-optional kubectl \
            mercurial apt-transport-https mono-complete libmysqlclient \
            unixodbc-dev yarn chrpath libssl-dev libxft-dev \
            libfreetype6 libfreetype6-dev libfontconfig1 libfontconfig1-dev \
            snmp pollinate libpq-dev postgresql-client powershell ruby-full \
            sphinxsearch subversion mongodb-org microsoft-edge-stable || true
          
          sudo apt-get purge -y $(dpkg-query -W -f='${binary:Package}\n' | grep -E '^mysql|^php|^dotnet') || true
          
          sudo apt-get autoremove -y
          sudo apt-get autoclean -y
          echo "some packages purged"
          
          df -h

      - name: "‚≠êInstall Repo and Python"
        run: |
          sudo apt update
          sudo apt install -y python3 python-is-python3 make
          
          mkdir -p ./git-repo
          curl -sSL https://storage.googleapis.com/git-repo-downloads/repo > ./git-repo/repo
          chmod a+rx ./git-repo/repo
          echo "REPO=$GITHUB_WORKSPACE/./git-repo/repo" >> $GITHUB_ENV

      - name: "‚≠êSet CONFIG Environment Variable"
        run: |
          CONFIG="${{ inputs.model }}"
          echo "CONFIG=$CONFIG" >> $GITHUB_ENV
          echo "CONFIG set to: $CONFIG"

      - name: "‚≠êClone AnyKernel3 and Other Dependencies"
        run: |
          echo "Cloning AnyKernel3 and other dependencies..."
          
          ANYKERNEL_BRANCH="gki-2.0"
          SUSFS_BRANCH="gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}"
          
          echo "Using branch for AnyKernel3: $ANYKERNEL_BRANCH"
          echo "Using branch for SUSFS: $SUSFS_BRANCH"
          
          git clone https://github.com/TheWildJames/AnyKernel3.git -b "$ANYKERNEL_BRANCH"
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b "$SUSFS_BRANCH"
          git clone https://github.com/TheWildJames/kernel_patches.git          

      - name: "‚≠êInitialize and Sync Kernel Source"
        run: |
          echo "Creating folder for configuration: $CONFIG..."
          mkdir -p "$CONFIG"
          cd "$CONFIG"
    
          echo "Initializing and syncing kernel source..."
          $REPO init -u https://github.com/OnePlusOSS/kernel_manifest.git -b ${{ inputs.branch }} -m ${{ inputs.manifest }} --repo-rev=v2.16 --depth=1 --no-clone-bundle --no-tags || {
            echo "Repo init failed"
            exit 1
          }
          wget https://github.com/reigadegr/Action-Build/raw/gki_official/fengchi.patch
          $REPO --version
          $REPO --trace sync -c --no-clone-bundle --no-tags --optimized-fetch -j$(nproc --all) --fail-fast || {
            echo "Repo sync failed"
            exit 1
          }
          # Apply fengchi patch if needed
          if [ -f "fengchi.patch" ]; then
            echo "Applying fengchi patch..."
            cd kernel_platform/common
            patch -p1 < ../../fengchi.patch || {
              echo "Failed to apply fengchi patch"
              exit 1
            }
            echo "Fengchi patch applied successfully"
            cd ../..
          fi
      
      - name: "‚≠êAdd KernelSU Next"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding KernelSU Next..."
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ]; then
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -
          else
            curl -LSs "https://raw.githubusercontent.com/KernelSU-Next/KernelSU-Next/next/kernel/setup.sh" | bash -s ${{ inputs.ksun_branch }}
          fi
          
          git submodule update --init --recursive

      - name: "‚≠êApply SUSFS Patches"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Applying SUSFS patches..."
          
          cp ../../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch ./common/
          cp ../../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          
          cd ./KernelSU-Next
          
          if [ "${{ inputs.ksun_branch }}" == "stable" ] || [ "${{ inputs.ksun_branch }}" == "next" ]; then
            echo "Applying next SUSFS patches..."
            cp ../../../kernel_patches/next/0001-kernel-patch-susfs-v1.5.7-to-KernelSU-Next-v1.0.7.patch ./ksun_susfs_latest.patch
            patch -p1 --forward < ksun_susfs_latest.patch || true
          fi
          
          case "${{ inputs.ksun_branch }}" in
            next|stable)
              BASE_VERSION=10200
              ;;
            next-susfs|next-susfs-dev)
              BASE_VERSION=10198
              ;;
            *)
              BASE_VERSION=10200
              ;;
          esac
          
          cd ./kernel
          KSU_VERSION=$(expr $(/usr/bin/git rev-list --count HEAD) "+" $BASE_VERSION)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile
          
          cd ../../common
          if [ "${{ inputs.soc }}" == "sun" ]; then
            sed -i '/#include <trace\/hooks\/blk.h>/a #include <trace/hooks/fs.h>' ./fs/namespace.c
          fi
          patch -p1 < 50_add_susfs_in_gki-${{ inputs.android_version }}-${{ inputs.kernel_version }}.patch || true

      - name: "‚≠êApply KSUN Hooks"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          echo "Applying KSUN Hooks..."
          cp ../../../kernel_patches/next/syscall_hooks.patch ./
          patch -p1 --fuzz=3 < ./syscall_hooks.patch
          
      - name: "‚≠êApply Hide Stuff Patches"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform/common"
          cp ../../../kernel_patches/69_hide_stuff.patch ./
          patch -p1 -F 3 < 69_hide_stuff.patch          

      - name: "üòãAdd KernelSU-Next and SUSFS Configuration Settings"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          
          echo "CONFIG_KSU=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_KPROBES_HOOK=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          echo "CONFIG_KSU_SUSFS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> ./common/arch/arm64/configs/gki_defconfig
          
          echo "CONFIG_TMPFS_XATTR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: "üòãAdd BBR Support"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_TCP_CONG=\"bbr\"" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_CDG=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_BBR=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_DEFAULT=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_BIC=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEFAULT_FQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo 'CONFIG_DEFAULT_NET_SCH="fq"' >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_SFQ=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_NET_SCH_TBF=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_CONG_HTCP=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IPV6_ECN=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_TCP_FASTOPEN=y" >> ./common/arch/arm64/configs/gki_defconfig          

      - name: "üòãAdd TTL Target Support"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Adding configuration settings to gki_defconfig..."
          echo "CONFIG_IP_NF_TARGET_TTL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_TARGET_HL=y" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IP6_NF_MATCH_HL=y" >> ./common/arch/arm64/configs/gki_defconfig

      - name: "üòãDisable blacklisted modules"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Cleaning gki_defconfig of blacklisted modules..."
          sed -i '/CONFIG_EXT4_INODE_TEST=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_F_FS_IPC_LOG=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_HUNG_TASK_ENH=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_IIO_TEST_FORMAT=/d' ./common/arch/arm64/configs/gki_defconfig          
          sed -i '/CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_OPLUS_LOCK_TORTURE=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_SOC_TOPOLOGY_TEST=/d' ./common/arch/arm64/configs/gki_defconfig
          sed -i '/CONFIG_SOC_UTILS_TEST=/d' ./common/arch/arm64/configs/gki_defconfig
          
          echo "Disabling blacklisted modules in gki_defconfig..."
          echo "CONFIG_EXT4_INODE_TEST=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_F_FS_IPC_LOG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_HUNG_TASK_ENH=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_IIO_TEST_FORMAT=n" >> ./common/arch/arm64/configs/gki_defconfig          
          echo "CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_OPLUS_LOCK_TORTURE=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SOC_TOPOLOGY_TEST=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_SOC_UTILS_TEST=n" >> ./common/arch/arm64/configs/gki_defconfig

      - name: "üé∂Patch Kconfig to Disable Blacklisted Modules"
        run: |
          echo "Patching Kconfig files to disable blacklisted modules..."
          cd "$CONFIG/kernel_platform"
          find . -name Kconfig -exec sed -i 's/CONFIG_EXT4_INODE_TEST=[ym]/CONFIG_EXT4_INODE_TEST=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_F_FS_IPC_LOG=[ym]/CONFIG_F_FS_IPC_LOG=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_HUNG_TASK_ENH=[ym]/CONFIG_HUNG_TASK_ENH=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_IIO_TEST_FORMAT=[ym]/CONFIG_IIO_TEST_FORMAT=n/' {} \; || true        
          find . -name Kconfig -exec sed -i 's/CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=[ym]/CONFIG_OPLUS_BSP_SIGKILL_DIAGNOSIS=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_OPLUS_LOCK_TORTURE=[ym]/CONFIG_OPLUS_LOCK_TORTURE=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_SOC_TOPOLOGY_TEST=[ym]/CONFIG_SOC_TOPOLOGY_TEST=n/' {} \; || true
          find . -name Kconfig -exec sed -i 's/CONFIG_SOC_UTILS_TEST=[ym]/CONFIG_SOC_UTILS_TEST=n/' {} \; || true
                
      - name: "üé∂Disable Debug stuffs"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "CONFIG_DEBUG_KERNEL=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DYNAMIC_DEBUG=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_RCU_TRACE=n" >> ./common/arch/arm64/configs/gki_defconfig
          echo "CONFIG_DEBUG_INFO=n" >> ./common/arch/arm64/configs/gki_defconfig

      - name: "üîçDebug Directory Structure"
        if: ${{ inputs.kernel_version == '6.6' || inputs.kernel_version == '6.1' }}
        run: |
          echo "Listing directory structure for $CONFIG/kernel_platform..."
          ls -R "$CONFIG/kernel_platform" || echo "Directory $CONFIG/kernel_platform not found"
          if [ -d "$CONFIG/kernel_platform/common/net/ipv4" ]; then
            echo "Contents of $CONFIG/kernel_platform/common/net/ipv4:"
            ls "$CONFIG/kernel_platform/common/net/ipv4"
          else
            echo "Directory $CONFIG/kernel_platform/common/net/ipv4 does not exist"
          fi

      - name: "üîçDebug Kernel Config"
        run: |
          echo "Checking gki_defconfig contents..."
          cat "$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig" || echo "gki_defconfig not found"
          grep -E "CONFIG_KSU=|CONFIG_TCP_CONG_BBR=|CONFIG_TMPFS_POSIX_ACL=" "$CONFIG/kernel_platform/common/arch/arm64/configs/gki_defconfig" || echo "Key configs not found"

      - name: "üí´Optimize Network Performance"
        if: ${{ inputs.kernel_version == '6.6' || inputs.kernel_version == '6.1' }}
        run: |
          # Define variables
          KERNEL_DIR="${CONFIG}/kernel_platform/common/net/ipv4"
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel3"
          SYSCTL_CONF="${ANYKERNEL_DIR}/sysctl.conf"
          NETWORK_TYPE="${NETWORK_TYPE:-lan}"

          # Validate directory
          if [ ! -d "$KERNEL_DIR" ]; then
            echo "Error: Directory $KERNEL_DIR does not exist"
            exit 1
          fi
          cd "$KERNEL_DIR" || exit 1

          # Backup files
          cp tcp_ipv4.c tcp_ipv4.c.bak 2>/dev/null || echo "Warning: Failed to backup tcp_ipv4.c"
          cp sysctl_net_ipv4.c sysctl_net_ipv4.c.bak 2>/dev/null || echo "Warning: Failed to backup sysctl_net_ipv4.c"

          # Function to configure ECN
          configure_ecn() {
            sed -i 's/net->ipv4.sysctl_tcp_ecn = 2;/net->ipv4.sysctl_tcp_ecn = 2;/' tcp_ipv4.c || {
              echo "Error: Failed to modify sysctl_tcp_ecn"
              return 1
            }
            sed -i 's/net->ipv4.sysctl_tcp_ecn_fallback = 1;/net->ipv4.sysctl_tcp_ecn_fallback = 1;/' tcp_ipv4.c || {
              echo "Error: Failed to modify sysctl_tcp_ecn_fallback"
              return 1
            }
            sed -i '/\.procname[[:space:]]*=[[:space:]]*"tcp_ecn"/, /^[[:space:]]*\}/ s/SYSCTL_TWO/SYSCTL_TWO/' sysctl_net_ipv4.c || {
              echo "Error: Failed to modify sysctl_net_ipv4.c for tcp_ecn"
              return 1
            }
            sed -i '/\.procname[[:space:]]*=[[:space:]]*"tcp_ecn_fallback"/, /^[[:space:]]*\}/ s/SYSCTL_ONE/SYSCTL_ONE/' sysctl_net_ipv4.c || {
              echo "Error: Failed to modify sysctl_net_ipv4.c for tcp_ecn_fallback"
              return 1
            }
            grep "sysctl_tcp_ecn" tcp_ipv4.c
            grep -A6 '\.procname.*tcp_ecn' sysctl_net_ipv4.c
            grep -A6 '\.procname.*tcp_ecn_fallback' sysctl_net_ipv4.c
          }

          # Function to configure TCP pacing
          configure_pacing() {
            local ss_ratio=175
            local ca_ratio=115
            [ "$NETWORK_TYPE" = "wan" ] && ss_ratio=180 && ca_ratio=120
            sed -i "s/net->ipv4.sysctl_tcp_pacing_ss_ratio = 200;/net->ipv4.sysctl_tcp_pacing_ss_ratio = $ss_ratio;/" tcp_ipv4.c || {
              echo "Error: Failed to modify sysctl_tcp_pacing_ss_ratio"
              return 1
            }
            sed -i "s/net->ipv4.sysctl_tcp_pacing_ca_ratio = 120;/net->ipv4.sysctl_tcp_pacing_ca_ratio = $ca_ratio;/" tcp_ipv4.c || {
              echo "Error: Failed to modify sysctl_tcp_pacing_ca_ratio"
              return 1
            }
            grep "sysctl_tcp_pacing" tcp_ipv4.c
          }

          # Function to configure sysctl settings (saved to AnyKernel3)
          configure_sysctl() {
            mkdir -p "$ANYKERNEL_DIR" || {
              echo "Error: Failed to create $ANYKERNEL_DIR"
              return 1
            }
            cat << EOF > "$SYSCTL_CONF"
          net.ipv4.tcp_rmem = 4096 87380 6291456
          net.ipv4.tcp_wmem = 4096 16384 4194304
          net.core.rmem_max = 6291456
          net.core.wmem_max = 4194304
          net.ipv4.tcp_window_scaling = 1
          net.ipv4.tcp_fastopen = 3
          net.ipv4.tcp_mtu_probing = 1
          net.ipv4.tcp_low_latency = 1
          net.ipv4.tcp_early_retrans = 3
          net.ipv4.tcp_thin_linear_timeouts = 1
          net.core.netdev_max_backlog = 5000
          net.ipv4.tcp_congestion_control = $( [ "$NETWORK_TYPE" = "wan" ] && echo "bbr" || echo "cubic" )
          EOF
            echo "Sysctl settings saved to $SYSCTL_CONF"
          }

          # Function to configure network interface (for documentation, applied on target device)
          configure_interface() {
            cat << EOF >> "$SYSCTL_CONF"
          # Apply on target device with:
          # ethtool -C <interface> rx-usecs 100 rx-frames 25
          # ethtool -C <interface> tx-usecs 100 tx-frames 25
          # ethtool -K <interface> gro on
          # Benchmark on target device with:
          # iperf3 -c <server_ip> -t 10 -P 4
          EOF
            echo "Interface tuning instructions added to $SYSCTL_CONF"
          }

          # Verify function existence
          if ! declare -f configure_interface > /dev/null; then
            echo "Error: configure_interface function not defined"
            exit 1
          fi

          # Execute configurations
          configure_ecn || { echo "Error: ECN configuration failed"; exit 1; }
          configure_pacing || { echo "Error: Pacing configuration failed"; exit 1; }
          configure_sysctl || { echo "Error: Sysctl configuration failed"; exit 1; }
          configure_interface || { echo "Error: Interface configuration failed"; exit 1; }

          # List modified files
          ls -t | grep -E 'tcp_|sysctl_' || echo "Warning: No matching files found"

          echo "Network optimizations applied successfully"

      - name: "‚öôÔ∏èConfigure AnyKernel3 to Apply Network Settings"
        run: |
          ANYKERNEL_DIR="${GITHUB_WORKSPACE}/AnyKernel3"
          ANYKERNEL_SCRIPT="${ANYKERNEL_DIR}/anykernel.sh"

          # Check if anykernel.sh exists
          if [ ! -f "$ANYKERNEL_SCRIPT" ]; then
            echo "Error: $ANYKERNEL_SCRIPT not found"
            exit 1
          fi

          # Backup anykernel.sh
          cp "$ANYKERNEL_SCRIPT" "$ANYKERNEL_SCRIPT.bak"

          # Add commands to apply sysctl and ethtool settings
          cat << 'EOF' >> "$ANYKERNEL_SCRIPT"

          # Apply network configurations
          ui_print "- Applying network configurations"
          write_boot
          if [ -f "$AKHOME/sysctl.conf" ]; then
            $BOOTMODE && ui_print "  Copying sysctl.conf to /system/etc/sysctl.d/"
            mkdir -p /system/etc/sysctl.d
            cp "$AKHOME/sysctl.conf" /system/etc/sysctl.d/99-network.conf
            chmod 644 /system/etc/sysctl.d/99-network.conf
            if command -v sysctl >/dev/null 2>&1; then
              sysctl -p /system/etc/sysctl.d/99-network.conf >/dev/null 2>&1 && ui_print "  Sysctl settings applied" || ui_print "  Warning: Failed to apply sysctl settings"
            else
              ui_print "  Warning: sysctl binary not found, settings will apply on boot"
            fi
          else
            ui_print "  Error: sysctl.conf not found in ZIP root"
          fi

          # Apply ethtool settings
          INTERFACE=$(ip link | grep -E 'wlan0|rmnet0' | awk '{print $2}' | cut -d':' -f1 | head -n1)
          if [ -n "$INTERFACE" ] && command -v ethtool >/dev/null 2>&1; then
            ethtool -C "$INTERFACE" rx-usecs 100 rx-frames 25 >/dev/null 2>&1 && ui_print "  Applied ethtool rx settings to $INTERFACE" || ui_print "  Warning: Failed to apply ethtool rx settings"
            ethtool -C "$INTERFACE" tx-usecs 100 tx-frames 25 >/dev/null 2>&1 && ui_print "  Applied ethtool tx settings to $INTERFACE" || ui_print "  Warning: Failed to apply ethtool tx settings"
            ethtool -K "$INTERFACE" gro on >/dev/null 2>&1 && ui_print "  Enabled GRO on $INTERFACE" || ui_print "  Warning: Failed to enable GRO"
          else
            ui_print "  Warning: ethtool or network interface not found, skipping interface tuning"
          fi

          # Create startup script for persistent ethtool settings
          mkdir -p /data/adb/service.d
          cat << EOT > /data/adb/service.d/network_tune.sh
          #!/system/bin/sh
          # Wait for network interface
          sleep 5
          INTERFACE=\$(ip link | grep -E 'wlan0|rmnet0' | awk '{print \$2}' | cut -d':' -f1 | head -n1)
          if [ -n "\$INTERFACE" ] && command -v ethtool >/dev/null 2>&1; then
            ethtool -C "\$INTERFACE" rx-usecs 100 rx-frames 25
            ethtool -C "\$INTERFACE" tx-usecs 100 tx-frames 25
            ethtool -K "\$INTERFACE" gro on
          fi
          EOT
          chmod 755 /data/adb/service.d/network_tune.sh
          ui_print "  Created startup script for persistent network settings"
          EOF

          echo "Updated $ANYKERNEL_SCRIPT to apply network configurations"

      - name: "üêÇIntegrate Sched Ext"
        if: ${{ inputs.kernel_version == '6.6' }}
        run: |
          cd "$CONFIG/kernel_platform"           
          git clone https://github.com/HanKuCha/sched_ext.git
          cp -r ./sched_ext/* ./common/kernel/sched
          rm -rf ./sched_ext/.git
          cd common/kernel/sched    

      - name: "üêÇConvert HMBIRD_OGKI to HMBIRD_GKI"
        if: ${{ inputs.kernel_version == '6.6' }}
        run: |
          cd "$CONFIG/kernel_platform/common"
          sed -i '1iobj-y += hmbird_patch.o' drivers/Makefile
          wget https://github.com/Numbersf/Action-Build/raw/main/patchs/hmbird_patch.patch
          echo "Applying OGKI to GKI Patch"
          patch -p1 -F 3 < hmbird_patch.patch
          echo "OGKI to GKI Patch Completed"          

      - name: "üêÇRun sed and perl Commands"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG/kernel_platform"
          
          echo "Running sed commands..."
          
          sed -i 's/CONFIG_LTO=n/CONFIG_LTO=y/' ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/CONFIG_LTO_CLANG_FULL=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig
          sed -i 's/CONFIG_LTO_CLANG_NONE=y/CONFIG_LTO_CLANG_THIN=y/' ./common/arch/arm64/configs/gki_defconfig
          
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i '$s|echo "\$res"|echo "\$res"|' ./common/scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "\$res"|' ./msm-kernel/scripts/setlocalversion
          sed -i '$s|echo "\$res"|echo "\$res"|' ./external/dtc/scripts/setlocalversion
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl || echo "No stamp.bzl!"
          sed -i 's/-dirty//' ./common/scripts/setlocalversion
          sed -i 's/-dirty//' ./msm-kernel/scripts/setlocalversion
          sed -i 's/-dirty//' ./external/dtc/scripts/setlocalversion
          sed -i 's/-dirty//' ./build/kernel/kleaf/workspace_status_stamp.py || echo "No workspace_status_stamp.py!"
          
          sed -i '/echo "LTO $LTO "/i export LTO=thin' ./oplus/build/oplus_setup.sh
          sed -i 's/export REPACK_IMG=true/export REPACK_IMG=false/g' ./oplus/build/oplus_setup.sh
          
          DATESTR=$(date -u)
          perl -pi -e 's{UTS_VERSION="\$\(echo \$UTS_VERSION \$CONFIG_FLAGS \$TIMESTAMP \| cut -b -\$UTS_LEN\)"}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./common/scripts/mkcompile_h
          perl -pi -e 's{UTS_VERSION="\$\s*.*$}{UTS_VERSION="#1 SMP PREEMPT $DATESTR"}' ./msm-kernel/scripts/mkcompile_h

      - name: "ü•∞Build the Kernel"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Building the kernel..."
          # Clear Cache
          sudo sh -c 'sync; echo 3 > /proc/sys/vm/drop_caches'
          
          rm ./kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm ./kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"
          
          BUILD_TYPE="gki"
          BAZEL_ARGS=(--jobs=$(nproc --all) --lto=thin)
          if [ "${{ inputs.soc }}" == "sun" ]; then
            BUILD_TYPE="perf"
            BAZEL_ARGS+=(-g)
          fi
          
          (stdbuf -oL bash -c '
            while true; do
              echo "=== $(date) ==="
              free -h
              echo "======"
              df -h
              echo "======"
              top -b -n 1 | head -n 15
              echo ""
              sleep 60
            done
          ') &
          MONITOR_PID=$!
          trap "kill $MONITOR_PID" EXIT
          
          if [ -f ./kernel_platform/build_with_bazel.py ]; then
            ./kernel_platform/oplus/bazel/oplus_modules_variant.sh ${{ inputs.soc }} "$BUILD_TYPE" ""
            ./kernel_platform/build_with_bazel.py -t ${{ inputs.soc }} $BUILD_TYPE "${BAZEL_ARGS[@]}" -o "$(pwd)/out"
          else
            LTO=thin ./kernel_platform/oplus/build/oplus_build_kernel.sh ${{ inputs.soc }} "$BUILD_TYPE"
          fi

      - name: "ü•∞Copy Images"
        run: |
          echo "Changing to configuration directory: $CONFIG..."
          cd "$CONFIG"
          
          echo "Copying Image"
          cp ./out/dist/Image ../AnyKernel3/Image
          if [ "${{ inputs.model }}" == "OP13r" ]; then
            cp ./out/dist/dtbo.img ../AnyKernel3/
            cp ./out/dist/system_dlkm.erofs.img ../AnyKernel3/system_dlkm.img
          fi

      - name: "üêÇCreate ZIP Files for Different Formats"
        run: |
          echo "Navigating to AnyKernel3 directory..."
          cd ./AnyKernel3
          
          # Verify sysctl.conf exists
          if [ ! -f "sysctl.conf" ]; then
            echo "Error: sysctl.conf not found in AnyKernel3 directory"
            exit 1
          fi
          
          # Zip the files in the AnyKernel3 directory with a new naming convention
          ZIP_NAME="${{ inputs.model }}_${{ inputs.android_version }}_${{ inputs.kernel_version }}_Next_SUSFS_AnyKernel3.zip"
          echo "Creating zip file $ZIP_NAME..."
          zip -r "../$ZIP_NAME" ./*
          # Fengchi Patch for OP13r
          if [ "${{ inputs.model }}" == ""OPAce5Pro" ]; then
            sed -i 's/hmbird/xxbird/g' dtbo.img
            zip -r "../$ZIP_NAME-CN-version.zip" ./*
          fi

      - name: "üí´Upload Build Artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.CONFIG }}
          path: |
            *.zip
