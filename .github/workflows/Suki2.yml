name: OnePlus 13Rv2
on:
  workflow_dispatch:
    inputs:
      KSU_META:
        type: string
        description: "Branch Name (cannot be empty)/Custom Version Identifier (leave empty to not modify)"
        required: false
        default: "susfs-main/⚡Ultra⚡"
      FAST_BUILD:
        type: boolean
        description: "Enable fast kernel build with Clang (if supported)"
        required: false
        default: true
  schedule:
    - cron: '0 16 * * *'
env:
  CPU: 'sm8650'
  FEIL: 'oneplus_13r'
  CPUD: 'pineapple'
  ANDROID_VERSION: 'android14'
  KERNEL_VERSION: '6.1'
  BUILD_METHOD: 'gki'
  RETENTION_COUNT: 3
  WORKSPACE_DIR: 'kernel_workspace'
  KERNEL_NAME: '-android14-11-o-g8156f574866f'
  CCACHE_DIR: '/home/runner/.ccache'
  CCACHE_SIZE: '20G'

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      ksuver: ${{ steps.ksuver.outputs.value }}
    steps:
      - name: Clean Up /mnt Filesystem
        run: |
          echo "Checking /mnt usage before cleanup:"
          df -h /mnt
          # Remove temporary files and directories in /mnt
          sudo find /mnt -type f -name '*.tmp' -delete
          sudo find /mnt -type d -name 'tmp*' -exec rm -rf {} +
          sudo rm -rf /mnt/tmp-pv.img /mnt/swapfile
          echo "Checking /mnt usage after cleanup:"
          df -h /mnt

      - name: Maximize Build Space
        uses: easimon/maximize-build-space@master
        with:
          root-reserve-mb: 8192
          temp-reserve-mb: 0
          swap-size-mb: 8192
          remove-dotnet: true
          remove-android: true
          remove-haskell: true
          remove-codeql: true
          overprovision-lvm: false
          build-mount-path-ownership: runner:runner
          pv-loop-path: /pv.img
          tmp-pv-loop-path: /mnt/tmp-pv.img

      - name: Display Memory and Storage
        run: |
          echo "Memory and swap:"
          sudo free -h
          echo
          sudo swapon --show
          echo
          echo "Available storage:"
          sudo df -h
          echo

      - name: Configure Git Information
        run: |
          git config --global user.name "0+builder"
          git config --global user.email "0+builder@yahoo.com"

      - name: Setup ccache
        uses: actions/cache@v4
        with:
          path: ${{ env.CCACHE_DIR }}
          key: ccache-${{ github.job }}-kernel-${{ env.KERNEL_VERSION }}-${{ github.sha }}
          restore-keys: |
            ccache-${{ github.job }}-kernel-${{ env.KERNEL_VERSION }}-
        continue-on-error: true

      - name: Cache Repo Tool
        uses: actions/cache@v4
        with:
          path: /usr/local/bin/repo
          key: repo-tool-${{ hashFiles('**/build.yml') }}
          restore-keys: |
            repo-tool-
        continue-on-error: true

      - name: Install Dependencies and ccache
        run: |
          sudo apt-get update -o Acquire::http::Timeout=30 -o Acquire::Retries=3
          sudo apt-get install -y --no-install-recommends python3 git curl ccache build-essential bc libncurses-dev bison flex libssl-dev libelf-dev lld
          ccache -M ${{ env.CCACHE_SIZE }}
          ccache -z

      - name: Display Selected Input Parameters (Debug)
        run: |
          echo "CPU: ${{ env.CPU }}"
          echo "Configuration File: ${{ env.FEIL }}"
          echo "Processor Codename: ${{ env.CPUD }}"
          echo "Android Version: ${{ env.ANDROID_VERSION }}"
          echo "Kernel Version: ${{ env.KERNEL_VERSION }}"
          echo "Build Method: ${{ env.BUILD_METHOD }}"
          echo "Selected FAST_BUILD: ${{ github.event.inputs.FAST_BUILD }}"
          echo "ccache stats:"
          ccache -s

      - name: Install Repo Tool
        if: steps.cache-repo-tool.outputs.cache-hit != 'true'
        run: |
          curl https://storage.googleapis.com/git-repo-downloads/repo > ~/repo
          chmod a+x ~/repo
          sudo mv ~/repo /usr/local/bin/repo

      - name: Cache Kernel Source
        uses: actions/cache@v4
        with:
          path: ${{ env.WORKSPACE_DIR }}
          key: kernel-source-${{ env.CPU }}-${{ env.FEIL }}-${{ github.sha }}
          restore-keys: |
            kernel-source-${{ env.CPU }}-${{ env.FEIL }}-
        continue-on-error: true

      - name: Initialize Repo and Sync Source Code
        run: |
          mkdir -p kernel_workspace && cd kernel_workspace
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b refs/heads/oneplus/${{ env.CPU }} -m ${{ env.FEIL }}.xml --depth=1
          repo sync -j$(nproc) --force-sync
          if [ -e kernel_platform/common/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/common/BUILD.bazel
          fi
          if [ -e kernel_platform/msm-kernel/BUILD.bazel ]; then
            sed -i '/^[[:space:]]*"protected_exports_list"[[:space:]]*:[[:space:]]*"android\/abi_gki_protected_exports_aarch64",$/d' kernel_platform/msm-kernel/BUILD.bazel
          fi
          rm kernel_platform/common/android/abi_gki_protected_exports_* || echo "No protected exports!"
          rm kernel_platform/msm-kernel/android/abi_gki_protected_exports_* || echo "No protected exports!"

      - name: Force Remove -dirty Suffix
        run: |
          cd kernel_workspace/kernel_platform
          sed -i 's/ -dirty//g' common/scripts/setlocalversion
          sed -i 's/ -dirty//g' msm-kernel/scripts/setlocalversion
          sed -i 's/ -dirty//g' external/dtc/scripts/setlocalversion
          sed -i '$i res=$(echo "$res" | sed '\''s/-dirty//g'\'')' common/scripts/setlocalversion
          git add -A
          git commit -m "Force remove -dirty suffix from kernel version"

      - name: Add SukiSU Ultra
        run: |
          cd kernel_workspace/kernel_platform
          META="${{ github.event.inputs.KSU_META }}"
          BRANCH_NAME="${META%%/*}"
          CUSTOM_TAG="${META#*/}"
          echo "Branch Name: $BRANCH_NAME"
          echo "Custom Version Identifier: $CUSTOM_TAG"
          curl -LSs "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/main/kernel/setup.sh" | bash -s "$BRANCH_NAME"
          cd ./KernelSU
          KSU_API_VERSION=$(curl -fsSL "https://raw.githubusercontent.com/SukiSU-Ultra/SukiSU-Ultra/$BRANCH_NAME/kernel/Makefile" | \
            grep -m1 "KSU_VERSION_API :=" | awk -F'= ' '{print $2}' | tr -d '[:space:]')
          if [[ -z "$KSU_API_VERSION" || "$(printf '%s\n' "$KSU_API_VERSION" "3.1.7" | sort -V | head -n1)" != "3.1.7" ]]; then
            KSU_API_VERSION="3.1.7"
          fi
          echo "KSU_API_VERSION=$KSU_API_VERSION" >> $GITHUB_ENV
          GIT_HASH=$(git rev-parse --short HEAD)
          echo "GIT_HASH=$GIT_HASH"
          if [[ -z "$CUSTOM_TAG" || "$CUSTOM_TAG" == "$BRANCH_NAME" ]]; then
            VERSION_FULL="v$KSU_API_VERSION-$GIT_HASH@$BRANCH_NAME"
          else
            VERSION_FULL="v$KSU_API_VERSION-$CUSTOM_TAG@$BRANCH_NAME[$GIT_HASH]"
          fi
          sed -i '/define get_ksu_version_full/,/endef/d' kernel/Makefile
          sed -i '/KSU_VERSION_API :=/d' kernel/Makefile
          sed -i '/KSU_VERSION_FULL :=/d' kernel/Makefile
          VERSION_DEFINITIONS=$(cat <<EOF
            define get_ksu_version_full
            $VERSION_FULL
            endef
            KSU_VERSION_API := $KSU_API_VERSION
            KSU_VERSION_FULL := $VERSION_FULL
          EOF
          )
          awk -v def="$VERSION_DEFINITIONS" '
            /REPO_OWNER :=/ {print; print def; inserted=1; next}
            1
            END {if (!inserted) print def}
          ' kernel/Makefile > kernel/Makefile.tmp && mv kernel/Makefile.tmp kernel/Makefile
          KSU_VERSION=$(expr $(git rev-list --count main 2>/dev/null || echo 13000) + 10700)
          echo "KSUVER=$KSU_VERSION" >> $GITHUB_ENV
          echo "::group::Preview of version information and some debug results in the final Makefile"
          grep -A10 "REPO_OWNER" kernel/Makefile
          grep "KSU_VERSION_FULL" kernel/Makefile
          echo "::endgroup::"

      - name: Apply SukiSU Ultra Patch
        run: |
          cd kernel_workspace
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}
          git clone https://github.com/ShirkNeko/SukiSU_patch.git
          cd kernel_platform
          echo "Applying susfs patch to kernel"
          cp ../susfs4ksu/kernel_patches/50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch ./common/
          cp ../susfs4ksu/kernel_patches/fs/* ./common/fs/
          cp ../susfs4ksu/kernel_patches/include/linux/* ./common/include/linux/
          cd ./common
          patch -p1 < 50_add_susfs_in_gki-${{ env.ANDROID_VERSION }}-${{ env.KERNEL_VERSION }}.patch || true
          echo "Completed"

      - name: Apply Hide Patch
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/69_hide_stuff.patch ./
          echo "Applying hide application patch"
          patch -p1 -F 3 < 69_hide_stuff.patch

      - name: Apply VFS Patch
        run: |
          cd kernel_workspace/kernel_platform/common
          cp ../../SukiSU_patch/hooks/syscall_hooks.patch ./
          echo "Applying VFS patch"
          patch -p1 -F 3 < syscall_hooks.patch
          echo "VFS patch completed"

      - name: Add Configuration Information
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE=./common/arch/arm64/configs/gki_defconfig
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          # SukiSU Ultra config
          echo "CONFIG_KSU_SUSFS_SUS_SU=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_MANUAL_HOOK=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU=y" >> "$CONFIG_FILE"
          echo "CONFIG_KPM=y" >> "$CONFIG_FILE"
          # SUSFS configuration
          echo "CONFIG_KSU_SUSFS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_PATH=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_KSTAT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_ENABLE_LOG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" >> "$CONFIG_FILE"
          echo "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" >> "$CONFIG_FILE"
          # TMPFS configurations
          echo "CONFIG_TMPFS_XATTR=y" >> "$CONFIG_FILE"
          echo "CONFIG_TMPFS_POSIX_ACL=y" >> "$CONFIG_FILE"
          # BBR configurations
          echo "CONFIG_TCP_CONG_ADVANCED=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BBR=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_BIC=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_WESTWOOD=n" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_CONG_HTCP=n" >> "$CONFIG_FILE"
          # ECN configurations
          echo "CONFIG_IP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_TCP_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IPV6_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_IP_NF_TARGET_ECN=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ=y" >> "$CONFIG_FILE"
          echo "CONFIG_NET_SCH_FQ_CODEL=y" >> "$CONFIG_FILE"
          sed -i -e '/CONFIG_NET_SCH_FQ_CODEL=/d' -e '$aCONFIG_NET_SCH_FQ_CODEL=y' ./common/arch/arm64/configs/gki_defconfig

      - name: Additional Configurations
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          echo "CONFIG_DEBUG_KERNEL=n" >> "$CONFIG_FILE"
          echo "CONFIG_DYNAMIC_DEBUG=n" >> "$CONFIG_FILE"
          echo "CONFIG_DEBUG_INFO=n" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG=y" >> "$CONFIG_FILE"
          echo "CONFIG_MQ_IOSCHED_SSG_CGROUP=y" >> "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_NONE/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG_FULL/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG_THIN/d' "$CONFIG_FILE"
          sed -i '/CONFIG_LTO_CLANG/d' "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG=y" >> "$CONFIG_FILE"
          echo "CONFIG_LTO_CLANG_THIN=y" >> "$CONFIG_FILE"
          echo "CONFIG_CC_OPTIMIZE_FOR_PERFORMANCE=y" >> "$CONFIG_FILE"

      - name: Disable OnePlus Kernel Module
        run: |
          cd kernel_workspace/kernel_platform
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          sed -i 's/CONFIG_REGMAP_KUNIT=m/CONFIG_REGMAP_KUNIT=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_INPUT_KUNIT_TEST=m/CONFIG_INPUT_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=m/CONFIG_SND_SOC_TOPOLOGY_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_SND_SOC_UTILS_KUNIT_TEST=m/CONFIG_SND_SOC_UTILS_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_HID_KUNIT_TEST=m/CONFIG_HID_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_RTC_LIB_KUNIT_TEST=m/CONFIG_RTC_LIB_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_CLK_KUNIT_TEST=m/CONFIG_CLK_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_CLK_GATE_KUNIT_TEST=m/CONFIG_CLK_GATE_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_IIO_FORMAT_KUNIT_TEST=m/CONFIG_IIO_FORMAT_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_EXT4_KUNIT_TESTS=m/CONFIG_EXT4_KUNIT_TESTS=n/g' "$CONFIG_FILE"
          sed -i 's/CONFIG_FAT_KUNIT_TEST=m/CONFIG_FAT_KUNIT_TEST=n/g' "$CONFIG_FILE"
          sed -i 's/check_defconfig//' ./common/build.config.gki

      - name: Add Build Name
        working-directory: ${{ env.WORKSPACE_DIR }}/kernel_platform
        run: |
          sed -i "/stable_scmversion_cmd/s/-maybe-dirty//g" ./build/kernel/kleaf/impl/stamp.bzl
          sed -i 's|echo "\$res"|echo "'"$(echo "${{ env.KERNEL_NAME }}" | sed 's/[\&/]/\\&/g')"'"|g' ./common/scripts/setlocalversion

      - name: Configure Bazel for ThinLTO
        if: github.event.inputs.FAST_BUILD != 'true'
        run: |
          cd kernel_workspace/kernel_platform
          BUILD_CONFIG="./common/build.config.gki"
          echo "BAZEL_LTO=--lto=thin" >> "$BUILD_CONFIG"
          echo "KBUILD_EXTRA_CFLAGS=-flto=thin" >> "$BUILD_CONFIG"

      - name: Build Kernel FAST
        if: github.event.inputs.FAST_BUILD == 'true'
        id: fast_build
        run: |
          KERNEL_VERSION="${{ env.KERNEL_VERSION }}"
          if [[ "$KERNEL_VERSION" == "6.6" ]]; then
            CLANG_PATH="clang-r510928"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "6.1" ]]; then
            CLANG_PATH="clang-r487747c"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.15" ]]; then
            CLANG_PATH="clang-r450784e"
            CLANG_DIR="prebuilts"
          elif [[ "$KERNEL_VERSION" == "5.10" ]]; then
            CLANG_PATH="clang-r416183b"
            CLANG_DIR="prebuilts-master"
            USE_LLVM_IAS=true
          else
            echo "fallback=true" >> "$GITHUB_OUTPUT"
            echo "⚠️ The current kernel version \"$KERNEL_VERSION\" does not have a corresponding clang toolchain, falling back to using the official build script"
            exit 0
          fi
          export PATH="$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin:$PATH"
          export PATH="/usr/lib/ccache:$PATH"
          export CC="ccache clang"
          # Verify ld.lld is available
          if ! command -v ld.lld >/dev/null 2>&1; then
            echo "⚠️ ld.lld not found. Ensure the lld package is installed and the Clang toolchain includes ld.lld."
            echo "Falling back to Bazel build."
            echo "fallback=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          # Verify Clang toolchain directory
          if [ -d "$GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin" ]; then
            echo "Clang toolchain found:"
            ls -l $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin
          else
            echo "Clang toolchain directory not found: $GITHUB_WORKSPACE/kernel_workspace/kernel_platform/$CLANG_DIR/clang/host/linux-x86/$CLANG_PATH/bin"
            echo "fallback=true" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          cd kernel_workspace/kernel_platform/common
          MAKE_ARGS="LLVM=1 ARCH=arm64 CROSS_COMPILE=aarch64-linux-gnu- \
            RUSTC=../../prebuilts/rust/linux-x86/1.73.0b/bin/rustc \
            PAHOLE=../../prebuilts/kernel-build-tools/linux-x86/bin/pahole \
            LD=ld.lld HOSTLD=ld.lld KCFLAGS+=-Wno-error"
          if [[ "$USE_LLVM_IAS" == "true" ]]; then
            MAKE_ARGS="LLVM_IAS=1 $MAKE_ARGS"
          fi
          make -j$(nproc --all) O=out $MAKE_ARGS gki_defconfig
          make -j$(nproc --all) O=out $MAKE_ARGS
          ccache -s
          echo "✅ Fast kernel compilation completed with ThinLTO"

      - name: Build Kernel
        if: github.event.inputs.FAST_BUILD != 'true' || steps.fast_build.outputs.fallback == 'true'
        run: |
          cd kernel_workspace
          export LTO=thin
          export KCFLAGS="-O2 -flto=thin -fno-merge-all-constants"
          export KBUILD_CFLAGS="-flto=thin"
          export BAZEL_LTO=--lto=thin
          export CC="ccache gcc"
          export CXX="ccache g++"
          export PATH="/usr/lib/ccache:$PATH"
          ./kernel_platform/build_with_bazel.py -t ${{ env.CPUD }} ${{ env.BUILD_METHOD }} --lto=thin --jobs=$(nproc)
          echo "ccache stats after build:"
          ccache -s

      - name: Make AnyKernel3
        run: |
          git clone https://github.com/Bouteillepleine/AnyKernel3.git --depth=1
          rm -rf ./AnyKernel3/.git
          mkdir -p kernel_workspace/kernel_platform/out/Final-Image-Find/
          dir1=""
          dir2=""
          image_path=$(find "./kernel_workspace/kernel_platform/common/out/" -name "Image" | head -n 1)
          if [ -n "$image_path" ]; then
            dir1=$(dirname "$image_path")/
            echo "Using the unified path compiled with make, successfully found the Image file"
          else
            image_path=$(find "./kernel_workspace/kernel_platform/out/" -name "Image" | head -n 1)
            if [ -n "$image_path" ]; then
              dir2=$(dirname "$image_path")/
              echo "Compiled with the official script, successfully found the Image file"
            else
              echo "Image file not found, build failed" >&2
              exit 1
            fi
          fi
          if [ -n "$image_path" ] && [ -f "$image_path" ]; then
            echo "Image file finally located at: $image_path"
            cp "$image_path" ./AnyKernel3/Image
            cp "$image_path" kernel_workspace/kernel_platform/out/Final-Image-Find/Image
          fi
          if [ -n "$dir2" ] && [ "${{ env.CPU }}" = "sm8750" ] && [ "${{ github.event.inputs.FAST_BUILD }}" = "false" ]; then
            echo "You are currently building sm8750 with the official script. Additional image files will be copied: dtbo.img, system_dlkm.img, vendor_dlkm.img, vendor_boot.img. Please note: If you switch to fast build after flashing this build, make sure to restore these partitions!"
            for file in dtbo.img system_dlkm.erofs.img vendor_dlkm.img vendor_boot.img; do
              if [ -f "$dir2$file" ]; then
                target_name="$file"
                if [ "$file" = "system_dlkm.erofs.img" ]; then
                  target_name="system_dlkm.img"
                fi
                cp "$dir2$file" "./AnyKernel3/$target_name"
              else
                echo "$file does not exist, skipping copy"
              fi
            done
          fi

      - name: Apply patch_linux and replace Image
        run: |
          cd kernel_workspace/kernel_platform/out/Final-Image-Find
          curl -LO --retry 5 --retry-delay 2 --retry-connrefused https://raw.githubusercontent.com/Numbersf/Action-Build/SukiSU-Ultra/patches/patch_linux
          chmod +x patch_linux
          ./patch_linux
          rm -f Image
          mv oImage Image
          cp Image $GITHUB_WORKSPACE/AnyKernel3/Image

      - name: Download Latest SUSFS Module from CI
        continue-on-error: true
        run: |
          LATEST_RUN_ID=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs?status=success" | \
            jq -r '.workflow_runs[] | select(.head_branch == "v1.5.2+") | .id' | head -n 1)
          if [ -z "$LATEST_RUN_ID" ]; then
            echo "No successful run found for branch v1.5.2+"
          else
            ARTIFACT_URL=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/sidex15/susfs4ksu-module/actions/runs/$LATEST_RUN_ID/artifacts" | jq -r '.artifacts[0].archive_download_url')
            if [ -n "$ARTIFACT_URL" ]; then
              curl -L -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -o ksu_module_susfs_1.5.2+_CI.zip "$ARTIFACT_URL"
              cp ksu_module_susfs_1.5.2+_CI.zip ./AnyKernel3/
            else
              echo "Failed to fetch artifact URL"
            fi
          fi

      - name: Package AnyKernel3 (ZIP)
        run: |
          cd $GITHUB_WORKSPACE/AnyKernel3
          zip -r ../AnyKernel3_KernelSU_${{ env.KSUVER }}_${{ env.FEIL }}.zip ./*
          cd ..

      - name: Set Suffix
        id: suffix
        run: |
          echo "value=_KPM_VFS" >> $GITHUB_OUTPUT

      - name: Remove _uv Suffix from FEIL
        id: feil_clean
        run: |
          clean_feil="${{ env.FEIL }}"
          clean_feil="${clean_feil%_v}"
          clean_feil="${clean_feil%_u}"
          echo "value=$clean_feil" >> $GITHUB_OUTPUT

      - name: Upload AnyKernel3 ZIP Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Kernel_ZIP_Artifacts
          path: |
            *.zip
          retention-days: 3

      - name: Record KSU Version
        id: ksuver
        run: |
          echo "value=${KSUVER}" >> $GITHUB_OUTPUT
